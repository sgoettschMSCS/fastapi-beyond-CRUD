name: Check Conventional Commits

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Commit Messages
        id: commits
        run: |
          commits=$(git log --format='%s' ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV
          echo "$commits" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Validate Conventional Commit Format
        id: validate
        run: |
          regex="^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?!?: .+"
          valid=true
          while IFS= read -r line; do
            if ! [[ $line =~ $regex ]]; then
              valid=false
              echo "‚ùå Invalid commit: $line"
            fi
          done <<<"${{ env.COMMIT_MESSAGES }}"

          if [ "$valid" = false ]; then
            echo "PR_FAILED=true" >> $GITHUB_ENV
          else
            echo "PR_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Close PR if Invalid
        if: env.PR_FAILED == 'true'
        run: |
          gh pr close "$PR_NUMBER" --reason "not-planned"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Send Email Notification on PR Failure (Ethereal Email)
        if: env.PR_FAILED == 'true'
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          PR_USER_EMAIL: ${{ github.event.pull_request.user.email }}
        run: |
          python - <<EOF
          import smtplib
          from email.message import EmailMessage

          msg = EmailMessage()
          msg["Subject"] = "üö® PR Closed: Invalid Commit Messages"
          msg["From"] = "${{ env.SMTP_USER }}"
          msg["To"] = "${{ env.PR_USER_EMAIL }}"
          msg.set_content("Your PR #${{ github.event.pull_request.number }} was closed because it contains invalid commit messages. Please update your commit messages to follow the Conventional Commit format and reopen the PR.")

          with smtplib.SMTP("${{ env.SMTP_SERVER }}", int("${{ env.SMTP_PORT }}")) as server:
              server.starttls()
              server.login("${{ env.SMTP_USER }}", "${{ env.SMTP_PASS }}")
              server.send_message(msg)
          EOF
