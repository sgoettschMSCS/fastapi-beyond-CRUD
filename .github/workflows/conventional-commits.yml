name: Check Conventional Commits

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Commit Messages
        id: commits
        run: |
          commits=$(git log --format='%s' ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV
          echo "$commits" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Validate Conventional Commit Format
        id: validate
        run: |
          # Define the conventional commit format more readably
          types="feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert"
          regex="^(${types})(\(.+\))?!?: .+"
          
          valid=true
          invalid_commits=()
          
          while IFS= read -r line; do
            if ! [[ $line =~ $regex ]]; then
              valid=false
              invalid_commits+=("$line")
              echo "‚ùå Invalid commit format: $line"
              echo "   Expected format: type(scope)?: description"
              echo "   Valid types: ${types}"
            else
              echo "‚úÖ Valid commit: $line"
            fi
          done <<<"${{ env.COMMIT_MESSAGES }}"
          
          if [ "$valid" = false ]; then
            echo "PR_FAILED=true" >> $GITHUB_ENV
            echo "INVALID_COMMITS=$(printf '%s\n' "${invalid_commits[@]}")" >> $GITHUB_ENV
          else
            echo "PR_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Set up Python
        if: env.PR_FAILED == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Send Email Notification on PR Failure (Ethereal Email)
        if: env.PR_FAILED == 'true'
        run: |
          # Export credentials from .env.example
          export SMTP_SERVER=$(grep SMTP_SERVER .env.example | cut -d'=' -f2)
          export SMTP_PORT=$(grep SMTP_PORT .env.example | cut -d'=' -f2)
          export SMTP_USER=$(grep SMTP_USER .env.example | cut -d'=' -f2)
          export SMTP_PASS=$(grep SMTP_PASS .env.example | cut -d'=' -f2)
          
          python - <<EOF
          import smtplib
          import os
          import sys
          from email.message import EmailMessage

          try:
              msg = EmailMessage()
              msg["Subject"] = "üö® PR Closed: Invalid Commit Messages"
              msg["From"] = os.environ["SMTP_USER"]
              msg["To"] = os.environ["SMTP_USER"]  # Send to the same Ethereal email
              
              pr_num = os.environ.get('GITHUB_EVENT_NUMBER', '${{ github.event.pull_request.number }}')
              msg.set_content(f"""
              PR

              Please ensure your commits follow the Conventional Commits format:
              <type>[optional scope]: <description>

              Valid types: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert
              Example: feat(auth): add login functionality
              """)

              with smtplib.SMTP(os.environ["SMTP_SERVER"], int(os.environ["SMTP_PORT"])) as server:
                  server.starttls()
                  server.login(os.environ["SMTP_USER"], os.environ["SMTP_PASS"])
                  server.send_message(msg)
                  print("‚úÖ Test email sent successfully to Ethereal Email")
          
          except Exception as e:
              print(f"‚ùå Error sending email: {str(e)}")
              sys.exit(1)
          EOF

      - name: Close PR if Invalid
        if: env.PR_FAILED == 'true'
        run: |
          gh pr close "$PR_NUMBER" -c "PR closed due to invalid commit messages. Please ensure your commits follow the Conventional Commits format:
          - Format: <type>[optional scope]: <description>
          - Valid types: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert
          - Example: feat(auth): add login functionality

          Update your commit messages and reopen the PR."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
