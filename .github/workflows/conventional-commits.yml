name: Check Conventional Commits

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Commit Messages
        id: commits
        run: |
          commits=$(git log --format='%s' ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV
          echo "$commits" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Validate Conventional Commit Format
        id: validate
        run: |
          regex="^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?!?: .+"
          valid=true
          while IFS= read -r line; do
            if ! [[ $line =~ $regex ]]; then
              valid=false
              echo "‚ùå Invalid commit: $line"
            fi
          done <<<"${{ env.COMMIT_MESSAGES }}"

          if [ "$valid" = false ]; then
            echo "PR_FAILED=true" >> $GITHUB_ENV
          else
            echo "PR_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Close PR if Invalid
        if: env.PR_FAILED == 'true'
        run: |
          gh pr close "$PR_NUMBER" -c "Closing PR due to invalid commit messages. Please update commit messages to follow Conventional Commits and reopen the PR."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Set up Python
        if: env.PR_FAILED == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        if: env.PR_FAILED == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install python-dotenv

      - name: Send Email Notification on PR Failure (Ethereal Email)
        if: env.PR_FAILED == 'true'
        working-directory: ${{ github.workspace }}  
        run: |
          pwd  # Debug: Print working directory
          ls -la  # Debug: List all files
          cp .env.example .env
          python - <<EOF
          import smtplib
          import os
          from email.message import EmailMessage
          from dotenv import load_dotenv
          from pathlib import Path

          # Use absolute path from workspace
          env_path = Path('${{ github.workspace }}') / '.env'
          print(f"Loading .env from: {env_path}")
          
          load_dotenv(dotenv_path=env_path)

          # Verify env vars loaded
          print(f"SMTP_SERVER: {os.getenv('SMTP_SERVER')}")
          print(f"SMTP_PORT: {os.getenv('SMTP_PORT')}")
          print(f"SMTP_USER: {os.getenv('SMTP_USER')}")

          msg = EmailMessage()
          msg["Subject"] = "üö® PR Closed: Invalid Commit Messages"
          msg["From"] = os.getenv("SMTP_USER")
          msg["To"] = "${{ github.event.pull_request.user.email }}"
          msg.set_content(f"Your PR #{os.environ.get('GITHUB_EVENT_NUMBER', '${{ github.event.pull_request.number }}')} was closed because it contains invalid commit messages. Please update your commit messages to follow the Conventional Commit format and reopen the PR.")

          with smtplib.SMTP(os.getenv("SMTP_SERVER"), int(os.getenv("SMTP_PORT"))) as server:
              server.starttls()
              server.login(os.getenv("SMTP_USER"), os.getenv("SMTP_PASS"))
              server.send_message(msg)
          EOF
